Bundler
  
  bundler helps manage libraries (gems) for a project (similar to npm install)

  after creating/update a Gemfile (see below), run `bundle install`

  can also do: `bundle exec ruby myscript.rb` to guarantee that certain gems are used when running a script

  creates/uses two files in your project's directory:

    Gemfile
      list of gem dependencies for your project, with flexible versioning
      similar to package.json (but only for dependencies)

      ```
      source 'https://rubygems.org'
      gem 'nokogiri'
      gem 'rack', '~> 2.0.1'
      ```

      no version specified   -- will download latest
      >= 1.0                 -- will download latest >= 1.0
      ~> 2.0.1               -- will download latest that is >= 2.0.1 and < 2.1

      aside: semantic versioning

         x.y.z

         change in x: major breaking changes in how library is used, you will very likely need to change your code
         change in y: new features, but "backwards compatible", should be safe to upgrade without any code changes
         change in z: minor fixes, should be safe to upgrade without any code changes


    Gemfile.lock

      autogenerated by bundler
      do not edit by hand
      specifies exact versions of all gems in the dependency tree (ie. of gems this project depends on, and gems each gem depends on, etc.)
      b/c Gemfile typically has ranges, useful to have exact version numbers, so that when you deploy your code, the same versions get installed as in dev


    more details @ https://bundler.io/



ORM
  Object Relational Mapping

  a way to work with data in your database using classes and objects

  relational databases (ex. postgres) are a decent match to how we use objects:
     Classes    : Tables
     Instances  : Rows
     Accessors  : Columns

    * not a perfect match, but pretty good:
        https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch

  there are 2 popular ORM patterns:

    ActiveRecord

      the class we want to persist knows about the database (ex. Contact)
        class knows how to retrieve records (ex. Contact.all, Contact.find(...) )
        instances know how to create, update, delete themselves (ex. c.save, c.delete)

          countries = Country.all     # fetch all countries from the database
          country = Country.find(5)   # fetch country w/ id=5
          country = Country.find_by_name("Canada")    # fetch country with name=Canada
          country.name = "Kanada"     # change name (only in Ruby)
          country.save                # update the record in the database w/ values in the object
          country.delete              # delete the record in the database corresponding with the object

    DataMapper

      a seperate class (ex. ContactMapper) is used to convert between the class we want to persist (ex. Contact)
        the class we work with inside our application (ex. Contact) knows nothing about databases
        the persistance class (ex. ContactMapper) knows how to create/update/delete contact instances (ex. ContactMapper.update(c)) and read (ex. ContactMapper.getAll())
        it's often used when your database structure doesn't exactly match 1:1 with the objects you want;
        offers better seperation of concerns; also helps avoid your class from becoming too big

          country = Country.new    # Country class knows about nothing about the DB

          CountryMapper.persist(country)          # persists the given country object to database (insert or update)

          countries = CountryMapper.all
          country = CountryMapper.find(5)
          CountryMapper.find_by_name("Canada")





ActiveRecord (the Ruby gem)

  guides: http://guides.rubyonrails.org/active_record_basics.html
  reference: http://edgeapi.rubyonrails.org/classes/ActiveRecord/Base.html

  most popular ORM library in Ruby ecosystems (Rails uses it)

  instead of writing SQL, work with classes, objects and methods

  gives us:
    - CRUD methods
    - ways to query with associations (think: JOINS)
    - validations (ex. make sure field is an integer before saving)
    - callbacks (if this happens, do this)
  
  "convention over configuration"
    by default, AR assumes a lot of things about how you will store your data
    if you follow along, you get lots of functionality "for free" , "like magic"

    primary key: id
    table name: plural snake_case of class-name  (ex. BlogPost -> blog_posts)
       (can use "SomeString".tableize to see what it expects) (need to `require 'active_record'` beforehand)
    foreign keys: snake_case other table's name + _id : ex. user_id


   inherit our classes from ActiveRecord:
     class Country < ActiveRecord::Base

   finding:
     Country.all
     Country.first
     Country.find(id)  # will error if does not exist
     Country.find_by(name: 'Canada')  # returns first matching
     Country.where(name: 'Canada')    # returns all matching

   relationships:
     c.find_by(name: 'Canada').cities

   can also:
     .order()
     .limit()
     .offset()

   crud:
    c = Country.new(name: "USA")   # can give values at create time, .new() does not save the object to db yet
    c.population = 100000          # can also add / change values 
    c.save                         # will INSERT or UPDATE to the database, returns truthy if successfuly, falsey if not  (ex. validation fails, or db disconnected, etc.)

    c = Country.create(name: "Mexico")  # .create() immediately persists (unless there are errors)

    c.destroy        # deletes


   crud + relationships:
     canada = Country.find_by(name: "Canada")
     city = City.create(name: "Calgary", country: canada)
     # or
     city = City.new(name: "Montreal")
     city.country = canada
     # or
     city = City.create(name: "Calgary", country_id: SOME_ID)
     # or
     canada.cities << City.create(name: "Pickering")


  ... lots more
